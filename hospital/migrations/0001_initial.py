# Generated by Django 4.2.24 on 2025-10-05 00:51

import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('start_at', models.DateTimeField(db_index=True)),
                ('end_at', models.DateTimeField(db_index=True)),
                ('status', models.CharField(default='SCHEDULED', max_length=16)),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Rendez-vous',
            },
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('code', models.CharField(max_length=32)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Lit',
                'verbose_name_plural': 'Lits',
            },
        ),
        migrations.CreateModel(
            name='BedOccupancy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('from_ts', models.DateTimeField(db_index=True)),
                ('to_ts', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('status', models.CharField(default='OCCUPIED', max_length=16)),
            ],
            options={
                'verbose_name': 'Occupation de lit',
                'verbose_name_plural': 'Occupations de lit',
            },
        ),
        migrations.CreateModel(
            name='ClinicalOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('category', models.CharField(choices=[('LAB', 'Laboratoire'), ('IMAGING', 'Imagerie'), ('MED', 'Médicament'), ('PROC', 'Procédure/Acte')], db_index=True, max_length=16)),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('PLACED', 'Prescrite'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée')], db_index=True, default='PLACED', max_length=16)),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Commande clinique',
                'verbose_name_plural': 'Commandes cliniques',
            },
        ),
        migrations.CreateModel(
            name='CodeAct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('code', models.CharField(db_index=True, max_length=32, unique=True)),
                ('label', models.CharField(max_length=255)),
                ('category', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'verbose_name': "Code d'acte",
                'verbose_name_plural': "Codes d'actes",
            },
        ),
        migrations.CreateModel(
            name='CodeDiagICD10',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('icd10', models.CharField(db_index=True, max_length=8, unique=True)),
                ('label', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Code CIM-10',
                'verbose_name_plural': 'Codes CIM-10',
            },
        ),
        migrations.CreateModel(
            name='CodeLabLOINC',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('loinc', models.CharField(db_index=True, max_length=16, unique=True)),
                ('label', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Code LOINC (laboratoire)',
                'verbose_name_plural': 'Codes LOINC (laboratoire)',
            },
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('centroid', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('name', models.CharField(max_length=120)),
                ('code', models.CharField(blank=True, max_length=32, null=True)),
                ('type', models.CharField(default='GENERAL', max_length=40)),
            ],
            options={
                'verbose_name': 'Service hospitalier',
                'verbose_name_plural': 'Services hospitaliers',
            },
        ),
        migrations.CreateModel(
            name='DiagnosticReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('modality', models.CharField(default='LAB', max_length=24)),
                ('status', models.CharField(default='FINAL', max_length=24)),
                ('issued_at', models.DateTimeField(db_index=True)),
            ],
            options={
                'verbose_name': 'Compte rendu diagnostique',
                'verbose_name_plural': 'Comptes rendus diagnostiques',
            },
        ),
        migrations.CreateModel(
            name='DischargeSummary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('outcome', models.CharField(max_length=32)),
                ('notes', models.TextField(blank=True, null=True)),
                ('discharged_at', models.DateTimeField(db_index=True)),
            ],
            options={
                'verbose_name': 'Résumé de sortie',
                'verbose_name_plural': 'Résumés de sortie',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'verbose_name': 'District sanitaire',
                'verbose_name_plural': 'Districts sanitaires',
            },
        ),
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('start_at', models.DateTimeField(db_index=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('outcome', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'verbose_name': 'Séjour / Visite',
                'verbose_name_plural': 'Séjours / Visites',
            },
        ),
        migrations.CreateModel(
            name='EncounterEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('kind', models.CharField(choices=[('ADMIT', 'Admission'), ('TRANSFER', 'Transfert'), ('DISCHARGE', 'Sortie')], max_length=16)),
                ('effective_at', models.DateTimeField(db_index=True)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Événement de séjour',
                'verbose_name_plural': 'Événements de séjour',
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('code', models.CharField(db_index=True, default=uuid.uuid4, max_length=46, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_chu', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'verbose_name': 'Établissement de santé',
                'verbose_name_plural': 'Établissements de santé',
            },
        ),
        migrations.CreateModel(
            name='FacilityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='ImagingStudy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('modality', models.CharField(default='XR', max_length=16)),
                ('accession_number', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('study_instance_uid', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('performed_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('images_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Étude d’imagerie',
                'verbose_name_plural': 'Études d’imagerie',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=14)),
                ('status', models.CharField(default='DRAFT', max_length=16)),
                ('issued_at', models.DateTimeField(blank=True, db_index=True, null=True)),
            ],
            options={
                'verbose_name': 'Facture',
                'verbose_name_plural': 'Factures',
            },
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('act_code', models.CharField(max_length=32)),
                ('label', models.CharField(max_length=255)),
                ('qty', models.IntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=14)),
            ],
            options={
                'verbose_name': 'Ligne de facture',
                'verbose_name_plural': 'Lignes de facture',
            },
        ),
        migrations.CreateModel(
            name='Kinship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('relation', models.CharField(choices=[('PARENT_OF', 'Parent of'), ('CHILD_OF', 'Child of'), ('SIBLING_OF', 'Sibling of'), ('SPOUSE_OF', 'Spouse of'), ('GUARDIAN_OF', 'Guardian of')], max_length=16)),
                ('valid_from', models.DateField(blank=True, null=True)),
                ('valid_to', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Lien familial',
                'verbose_name_plural': 'Liens familiaux',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('code', models.CharField(db_index=True, max_length=64, unique=True)),
                ('label', models.CharField(max_length=255)),
                ('form', models.CharField(blank=True, max_length=64, null=True)),
                ('strength', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'verbose_name': 'Médicament',
                'verbose_name_plural': 'Médicaments',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('code', models.CharField(db_index=True, max_length=64)),
                ('label', models.CharField(max_length=255)),
                ('status', models.CharField(default='ORDERED', max_length=16)),
                ('scheduled_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='hospital.clinicalorder')),
            ],
            options={
                'verbose_name': 'Ligne de commande',
                'verbose_name_plural': 'Lignes de commande',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('mpi', models.CharField(db_index=True, max_length=128, unique=True)),
                ('given_name', models.CharField(blank=True, max_length=120, null=True)),
                ('family_name', models.CharField(blank=True, max_length=120, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('cmu', models.CharField(blank=True, max_length=128, null=True)),
                ('cni', models.CharField(blank=True, max_length=128, null=True)),
                ('phone_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('national_id_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('is_deceased', models.BooleanField(db_index=True, default=False)),
                ('classified', models.BooleanField(db_index=True, default=False)),
                ('death_date', models.DateField(blank=True, null=True)),
                ('father', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children_as_father', to='hospital.patient')),
                ('mother', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children_as_mother', to='hospital.patient')),
                ('residence_commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients_current', to='hospital.commune')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='Payer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('code', models.CharField(db_index=True, max_length=32, unique=True)),
                ('label', models.CharField(max_length=160)),
            ],
            options={
                'verbose_name': 'Payeur / Assurance',
                'verbose_name_plural': 'Payeurs / Assurances',
            },
        ),
        migrations.CreateModel(
            name='Pole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'verbose_name': 'Pôle régional',
                'verbose_name_plural': 'Pôles régionaux',
            },
        ),
        migrations.CreateModel(
            name='Practitioner',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('matricule', models.CharField(db_index=True, max_length=64)),
                ('role', models.CharField(max_length=40)),
                ('specialty', models.CharField(blank=True, max_length=120, null=True)),
                ('active', models.BooleanField(default=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.department')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='practitioners', to='hospital.facility')),
            ],
            options={
                'verbose_name': 'Professionnel de santé',
                'verbose_name_plural': 'Professionnels de santé',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('status', models.CharField(default='ACTIVE', max_length=16)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prescriptions', to='hospital.encounter')),
                ('prescriber', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner')),
            ],
            options={
                'verbose_name': 'Prescription',
                'verbose_name_plural': 'Prescriptions',
            },
        ),
        migrations.CreateModel(
            name='VisitType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('code', models.CharField(db_index=True, max_length=16, unique=True)),
                ('label', models.CharField(max_length=128)),
                ('category', models.CharField(blank=True, max_length=32, null=True)),
                ('active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveSmallIntegerField(default=100)),
            ],
            options={
                'verbose_name': 'Type de visite',
                'verbose_name_plural': 'Types de visite',
                'indexes': [models.Index(fields=['active', 'sort_order'], name='hospital_vi_active_51029c_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('idp_sub', models.CharField(db_index=True, help_text="Identifiant 'sub' de l'IdP (Keycloak).", max_length=128, unique=True)),
                ('username', models.CharField(db_index=True, help_text="Nom d'utilisateur applicatif (peut dupliquer celui de l'IdP).", max_length=150)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.EmailValidator()])),
                ('phone', models.CharField(blank=True, help_text='Stocker au format E.164 si possible (ex: +2250700000000).', max_length=32, null=True, validators=[django.core.validators.RegexValidator(message='Numéro de téléphone invalide (format E.164 attendu, ex: +2250700000000).', regex='^\\+[1-9]\\d{6,14}$')])),
                ('tenant_key', models.CharField(blank=True, help_text='Clé locataire / établissement (ex: CHU-COCODY).', max_length=64, null=True)),
                ('scope_level', models.CharField(choices=[('SERVICE', 'Service'), ('DISTRICT', 'District'), ('REGION', 'Région sanitaire'), ('POLE', 'Pôle régional'), ('NATIONAL', 'National')], default='SERVICE', max_length=20)),
                ('departments', models.JSONField(blank=True, default=list)),
                ('roles', models.JSONField(blank=True, default=list)),
                ('patient_mpi', models.CharField(blank=True, db_index=True, help_text='Identifiant MPI pseudonymisé si utilisateur = patient.', max_length=128, null=True)),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='hospital.facility')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('collected_at', models.DateTimeField(db_index=True)),
                ('specimen_type', models.CharField(choices=[('BLOOD', 'Sang'), ('URINE', 'Urine'), ('STOOL', 'Selles'), ('SWAB', 'Écouvillon'), ('OTHER', 'Autre')], default='BLOOD', max_length=16)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('collector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner')),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.encounter')),
                ('items', models.ManyToManyField(blank=True, related_name='specimens', to='hospital.orderitem')),
            ],
            options={
                'verbose_name': 'Échantillon biologique',
                'verbose_name_plural': 'Échantillons biologiques',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('pole', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='regions', to='hospital.pole')),
            ],
            options={
                'verbose_name': 'Région sanitaire',
                'verbose_name_plural': 'Régions sanitaires',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('encounter_id', models.UUIDField(blank=True, null=True)),
                ('status', models.CharField(default='OPEN', max_length=16)),
                ('from_facility', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='referrals_out', to='hospital.facility')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.patient')),
                ('to_facility', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='referrals_in', to='hospital.facility')),
            ],
            options={
                'verbose_name': 'Référence / Transfert',
                'verbose_name_plural': 'Références / Transferts',
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('code', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=255)),
                ('performed_at', models.DateTimeField(db_index=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='procedures', to='hospital.encounter')),
                ('performer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner')),
            ],
            options={
                'verbose_name': 'Acte / Procédure',
                'verbose_name_plural': 'Actes / Procédures',
            },
        ),
        migrations.CreateModel(
            name='PrescriptionLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('dose', models.CharField(max_length=64)),
                ('route', models.CharField(max_length=32)),
                ('frequency', models.CharField(max_length=64)),
                ('duration_days', models.IntegerField(default=1)),
                ('prn', models.BooleanField(default=False)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.medication')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='hospital.prescription')),
            ],
            options={
                'verbose_name': 'Ligne de prescription',
                'verbose_name_plural': 'Lignes de prescription',
            },
        ),
        migrations.CreateModel(
            name='PatientResidence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('address_text', models.CharField(blank=True, max_length=255, null=True)),
                ('from_date', models.DateField(db_index=True)),
                ('to_date', models.DateField(blank=True, db_index=True, null=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='residents', to='hospital.commune')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residences', to='hospital.patient')),
            ],
            options={
                'verbose_name': 'Résidence du patient',
                'verbose_name_plural': 'Résidences du patient',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('loinc_code', models.CharField(db_index=True, max_length=32)),
                ('value', models.CharField(blank=True, max_length=256, null=True)),
                ('unit', models.CharField(blank=True, max_length=32, null=True)),
                ('result_flag', models.CharField(blank=True, max_length=16, null=True)),
                ('observed_at', models.DateTimeField(db_index=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='hospital.encounter')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='hospital.diagnosticreport')),
            ],
            options={
                'verbose_name': 'Observation / Résultat',
                'verbose_name_plural': 'Observations / Résultats',
            },
        ),
        migrations.CreateModel(
            name='MedicationDispense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('dispensed_at', models.DateTimeField(db_index=True)),
                ('dispenser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner')),
                ('prescription_line', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dispenses', to='hospital.prescriptionline')),
            ],
            options={
                'verbose_name': 'Dispensation',
                'verbose_name_plural': 'Dispensations',
            },
        ),
        migrations.CreateModel(
            name='MedicationAdministration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tenant_key', models.CharField(db_index=True, editable=False, max_length=64)),
                ('administered_at', models.DateTimeField(db_index=True)),
                ('dose_given', models.CharField(max_length=64)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('nurse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner')),
                ('prescription_line', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='administrations', to='hospital.prescriptionline')),
            ],
            options={
                'verbose_name': 'Administration médicamenteuse',
                'verbose_name_plural': 'Administrations médicamenteuses',
            },
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['label'], name='hospital_me_label_d95983_idx'),
        ),
        migrations.AddField(
            model_name='kinship',
            name='dst',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kinship_in', to='hospital.patient'),
        ),
        migrations.AddField(
            model_name='kinship',
            name='src',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kinship_out', to='hospital.patient'),
        ),
        migrations.AddField(
            model_name='invoiceline',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='hospital.invoice'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='encounter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='hospital.encounter'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='payer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.payer'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='order_item',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='imaging_study', to='hospital.orderitem'),
        ),
        migrations.AddField(
            model_name='facility',
            name='commune',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='hospital.commune'),
        ),
        migrations.AddField(
            model_name='facility',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='facility',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='facilities', to='hospital.facilitytype'),
        ),
        migrations.AddField(
            model_name='encounterevent',
            name='bed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.bed'),
        ),
        migrations.AddField(
            model_name='encounterevent',
            name='encounter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='hospital.encounter'),
        ),
        migrations.AddField(
            model_name='encounterevent',
            name='from_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='hospital.department'),
        ),
        migrations.AddField(
            model_name='encounterevent',
            name='to_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='hospital.department'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.department'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='encounters', to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='encounters', to='hospital.patient'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='visit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='encounters', to='hospital.visittype'),
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='districts', to='hospital.region'),
        ),
        migrations.AddField(
            model_name='dischargesummary',
            name='encounter',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='discharge_summary', to='hospital.encounter'),
        ),
        migrations.AddField(
            model_name='dischargesummary',
            name='primary_icd10',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.codediagicd10'),
        ),
        migrations.AddField(
            model_name='diagnosticreport',
            name='encounter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='hospital.encounter'),
        ),
        migrations.AddField(
            model_name='diagnosticreport',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='diagnostic_reports', to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='department',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='departments', to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='commune',
            name='district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='communes', to='hospital.district'),
        ),
        migrations.AddField(
            model_name='clinicalorder',
            name='encounter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='hospital.encounter'),
        ),
        migrations.AddField(
            model_name='clinicalorder',
            name='ordered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner'),
        ),
        migrations.AddField(
            model_name='bedoccupancy',
            name='bed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.bed'),
        ),
        migrations.AddField(
            model_name='bedoccupancy',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.patient'),
        ),
        migrations.AddField(
            model_name='bed',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='beds', to='hospital.department'),
        ),
        migrations.AddField(
            model_name='bed',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='beds', to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.department'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.facility'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hospital.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hospital.practitioner'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['tenant_key', 'scope_level'], name='hospital_us_tenant__10e852_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['username'], name='hospital_us_usernam_66118c_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=django.contrib.postgres.indexes.GinIndex(fields=['departments'], name='hospital_us_departm_89da3e_gin'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=django.contrib.postgres.indexes.GinIndex(fields=['roles'], name='hospital_us_roles_45ee1c_gin'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('username'), models.F('tenant_key'), name='uq_userprofile_username_ci_per_tenant', violation_error_message='Ce username existe déjà sur ce tenant.'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['tenant_key', 'collected_at'], name='hospital_sp_tenant__042e56_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='region',
            unique_together={('pole', 'name')},
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['tenant_key', 'status'], name='hospital_re_tenant__857c79_idx'),
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['from_facility'], name='hospital_re_from_fa_2dbd36_idx'),
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['to_facility'], name='hospital_re_to_faci_ddd7cf_idx'),
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['patient'], name='hospital_re_patient_adfded_idx'),
        ),
        migrations.AddIndex(
            model_name='procedure',
            index=models.Index(fields=['tenant_key', 'performed_at'], name='hospital_pr_tenant__895c08_idx'),
        ),
        migrations.AddIndex(
            model_name='procedure',
            index=models.Index(fields=['encounter'], name='hospital_pr_encount_d29197_idx'),
        ),
        migrations.AddIndex(
            model_name='procedure',
            index=models.Index(fields=['code'], name='hospital_pr_code_8e1bc9_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionline',
            index=models.Index(fields=['tenant_key', 'start_at'], name='hospital_pr_tenant__f3ed3b_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['tenant_key', 'status'], name='hospital_pr_tenant__d52e66_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['tenant_key', 'matricule'], name='hospital_pr_tenant__f83e54_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['active'], name='hospital_pr_active_049c39_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='practitioner',
            unique_together={('facility', 'matricule')},
        ),
        migrations.AddIndex(
            model_name='patientresidence',
            index=models.Index(fields=['patient', 'from_date'], name='hospital_pa_patient_d9f0d7_idx'),
        ),
        migrations.AddIndex(
            model_name='patientresidence',
            index=models.Index(fields=['patient', 'to_date'], name='hospital_pa_patient_1c5c36_idx'),
        ),
        migrations.AddIndex(
            model_name='patientresidence',
            index=models.Index(fields=['patient', 'is_primary'], name='hospital_pa_patient_3fde0b_idx'),
        ),
        migrations.AddIndex(
            model_name='patientresidence',
            index=models.Index(fields=['commune'], name='hospital_pa_commune_fb8ee6_idx'),
        ),
        migrations.AddConstraint(
            model_name='patientresidence',
            constraint=models.UniqueConstraint(condition=models.Q(('is_primary', True), ('to_date__isnull', True)), fields=('patient',), name='uniq_current_primary_residence_per_patient'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['family_name', 'given_name'], name='hospital_pa_family__c4064a_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['birth_date'], name='hospital_pa_birth_d_33ed07_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['is_deceased', 'death_date'], name='hospital_pa_is_dece_d50c9c_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['tenant_key', 'status'], name='hospital_or_tenant__1754d5_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['code'], name='hospital_or_code_c6c6a2_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['tenant_key', 'observed_at', 'loinc_code'], name='hospital_ob_tenant__9ea640_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['encounter'], name='hospital_ob_encount_3c2382_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationdispense',
            index=models.Index(fields=['tenant_key', 'dispensed_at'], name='hospital_me_tenant__7a7ff5_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationadministration',
            index=models.Index(fields=['tenant_key', 'administered_at'], name='hospital_me_tenant__4521ef_idx'),
        ),
        migrations.AddIndex(
            model_name='kinship',
            index=models.Index(fields=['src', 'relation'], name='hospital_ki_src_id_515295_idx'),
        ),
        migrations.AddIndex(
            model_name='kinship',
            index=models.Index(fields=['dst', 'relation'], name='hospital_ki_dst_id_78453d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='kinship',
            unique_together={('src', 'dst', 'relation')},
        ),
        migrations.AddConstraint(
            model_name='invoiceline',
            constraint=models.CheckConstraint(check=models.Q(('qty__gt', 0)), name='invoiceline_qty_gt_0'),
        ),
        migrations.AddConstraint(
            model_name='invoiceline',
            constraint=models.CheckConstraint(check=models.Q(('unit_price__gte', 0)), name='invoiceline_unit_price_ge_0'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['tenant_key', 'issued_at', 'status'], name='hospital_in_tenant__222985_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['encounter'], name='hospital_in_encount_2ee248_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['tenant_key', 'performed_at'], name='hospital_im_tenant__34bec9_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['accession_number'], name='hospital_im_accessi_190f33_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_instance_uid'], name='hospital_im_study_i_0dea9d_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['code'], name='hospital_fa_code_5d5c5c_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['type'], name='hospital_fa_type_id_02caed_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['active'], name='hospital_fa_active_761b15_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['parent'], name='hospital_fa_parent__a0ae8e_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['commune'], name='hospital_fa_commune_66c9d2_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=models.Index(fields=['name'], name='hospital_fa_name_26f6e5_idx'),
        ),
        migrations.AddIndex(
            model_name='facility',
            index=django.contrib.postgres.indexes.GistIndex(fields=['location'], name='hospital_fa_locatio_622795_gist'),
        ),
        migrations.AddConstraint(
            model_name='facility',
            constraint=models.CheckConstraint(check=models.Q(('parent', models.F('id')), _negated=True), name='facility_parent_not_self'),
        ),
        migrations.AddIndex(
            model_name='encounterevent',
            index=models.Index(fields=['tenant_key', 'effective_at'], name='hospital_en_tenant__a63cfb_idx'),
        ),
        migrations.AddIndex(
            model_name='encounterevent',
            index=models.Index(fields=['encounter', 'kind'], name='hospital_en_encount_d6653b_idx'),
        ),
        migrations.AddConstraint(
            model_name='encounterevent',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('kind', 'ADMIT'), _negated=True), ('to_department__isnull', False), _connector='OR'), name='admit_needs_to_department'),
        ),
        migrations.AddConstraint(
            model_name='encounterevent',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('kind', 'TRANSFER'), _negated=True), models.Q(('from_department__isnull', False), ('to_department__isnull', False)), _connector='OR'), name='transfer_needs_from_and_to'),
        ),
        migrations.AddIndex(
            model_name='encounter',
            index=models.Index(fields=['tenant_key', 'start_at'], name='hospital_en_tenant__663cc9_idx'),
        ),
        migrations.AddIndex(
            model_name='encounter',
            index=models.Index(fields=['facility', 'start_at'], name='hospital_en_facilit_398209_idx'),
        ),
        migrations.AddIndex(
            model_name='encounter',
            index=models.Index(fields=['patient'], name='hospital_en_patient_8d6b36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='district',
            unique_together={('region', 'name')},
        ),
        migrations.AddIndex(
            model_name='dischargesummary',
            index=models.Index(fields=['tenant_key', 'discharged_at'], name='hospital_di_tenant__8e4f4a_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticreport',
            index=models.Index(fields=['tenant_key', 'issued_at'], name='hospital_di_tenant__299fde_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticreport',
            index=models.Index(fields=['encounter'], name='hospital_di_encount_5185f8_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticreport',
            index=models.Index(fields=['modality', 'status'], name='hospital_di_modalit_5a84a6_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['tenant_key', 'type'], name='hospital_de_tenant__653157_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['facility', 'code'], name='hospital_de_facilit_fc72af_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('facility', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='commune',
            unique_together={('district', 'name')},
        ),
        migrations.AddIndex(
            model_name='clinicalorder',
            index=models.Index(fields=['tenant_key', 'category', 'status'], name='hospital_cl_tenant__4366ef_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalorder',
            index=models.Index(fields=['encounter'], name='hospital_cl_encount_4e6fda_idx'),
        ),
        migrations.AddIndex(
            model_name='bedoccupancy',
            index=models.Index(fields=['tenant_key', 'from_ts'], name='hospital_be_tenant__3dad36_idx'),
        ),
        migrations.AddIndex(
            model_name='bedoccupancy',
            index=models.Index(fields=['bed'], name='hospital_be_bed_id_8a2f19_idx'),
        ),
        migrations.AddIndex(
            model_name='bedoccupancy',
            index=models.Index(fields=['patient'], name='hospital_be_patient_94da34_idx'),
        ),
        migrations.AddConstraint(
            model_name='bedoccupancy',
            constraint=models.CheckConstraint(check=models.Q(('to_ts__isnull', True), ('to_ts__gte', models.F('from_ts')), _connector='OR'), name='bedocc_time_order_ok'),
        ),
        migrations.AddConstraint(
            model_name='bedoccupancy',
            constraint=models.UniqueConstraint(condition=models.Q(('to_ts__isnull', True)), fields=('bed',), name='uniq_open_bed_occupancy'),
        ),
        migrations.AddIndex(
            model_name='bed',
            index=models.Index(fields=['tenant_key', 'active'], name='hospital_be_tenant__baa91f_idx'),
        ),
        migrations.AddIndex(
            model_name='bed',
            index=models.Index(fields=['department'], name='hospital_be_departm_24cd33_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bed',
            unique_together={('facility', 'code')},
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['tenant_key', 'start_at'], name='hospital_ap_tenant__185376_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['practitioner', 'start_at'], name='hospital_ap_practit_aeab92_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient', 'start_at'], name='hospital_ap_patient_c8d21b_idx'),
        ),
        migrations.AddConstraint(
            model_name='appointment',
            constraint=models.CheckConstraint(check=models.Q(('end_at__gt', models.F('start_at'))), name='appt_time_valid'),
        ),
        migrations.AddConstraint(
            model_name='appointment',
            constraint=models.UniqueConstraint(fields=('practitioner', 'start_at'), name='uniq_practitioner_start'),
        ),
    ]
