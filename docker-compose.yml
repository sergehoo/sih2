
networks:
  proxy:
    external: true
  internal:
    driver: bridge

volumes:
  traefik_letsencrypt:
  pg_data:

services:
  sighdb:
    image: postgis/postgis:16-3.4
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init-keycloak.sql:/docker-entrypoint-initdb.d/10-init-keycloak.sql:ro
    networks:
      - internal

  pgbouncer:
    image: edoburu/pgbouncer:v1.24.1-p1
    restart: unless-stopped
    environment:
      # === Côté edoburu ===
      DB_HOST: sighdb
      DB_PORT: "5432"
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
      DB_NAME: ${PG_DB}


      # Options de pool
      POOL_MODE: transaction
      MAX_CLIENT_CONN: "5000"
      DEFAULT_POOL_SIZE: "50"
      AUTH_TYPE: scram-sha-256
      # Ecoute côté pgbouncer
      LISTEN_ADDR: 0.0.0.0
      LISTEN_PORT: "6432"
      IGNORE_STARTUP_PARAMETERS: "extra_float_digits,options,search_path"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c '</dev/tcp/127.0.0.1/6432'" ]
      interval: 5s
      timeout: 3s
      retries: 12
    depends_on:
      - sighdb
    networks:
      - internal
    ports:
      - 6432

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    networks:
      - internal
    # ports: # inutile en prod derrière le réseau internal
    #   - "6379:6379"

  sighweb:
    build:
      context: .
      dockerfile: Dockerfile

    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      DJANGO_SETTINGS_MODULE: sigh.settings.prod
      # DATABASE_URL: postgresql://${PG_USER}:${PG_PASSWORD}@pgbouncer:6432/${PG_DB}
    depends_on:
      - pgbouncer
      - redis
    expose:
      - "8000"
    networks:
      - internal
      - proxy
    labels:
      - "traefik.enable=true"
      # Route HTTPS pour l'API
      - "traefik.http.routers.api.rule=Host(`${API_HOST}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=lets"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.middlewares=sec-headers@docker"
      # (Option) middlewares de sécurité

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://sighdb:5432/${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USER}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}

      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}

      KC_HOSTNAME: ${SSO_HOST}
      KC_HTTP_ENABLED: "true"

      KC_PROXY_HEADERS: xforwarded

      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HTTP_RELATIVE_PATH: "/"

#      KC_HOSTNAME_STRICT: "false"
#      KC_HOSTNAME_STRICT_HTTPS: "false"
      JAVA_OPTS: "-Xms512m -Xmx1024m -Djgroups.udp.mcast_port=45700"

    command: [ "start" ]
    networks:
      - internal
      - proxy
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.sso.rule=Host(`${SSO_HOST}`)"
      - "traefik.http.routers.sso.entrypoints=websecure"
      - "traefik.http.routers.sso.tls.certresolver=lets"
      - "traefik.http.services.sso.loadbalancer.server.port=8080"
      - "traefik.http.routers.sso.middlewares=sec-headers@docker"
      - "traefik.http.services.sso.loadbalancer.passhostheader=true"
      - "traefik.http.services.sso.loadbalancer.healthcheck.path=/health/ready"
      - "traefik.http.services.sso.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.sso.loadbalancer.healthcheck.timeout=3s"


  # (Option) frontends React servis par nginx — décommentez si besoin
  # staff_frontend:
  #   image: nginx:1.27-alpine
  #   restart: unless-stopped
  #   networks: [proxy]
  #   volumes:
  #     - ./staff-frontend/dist:/usr/share/nginx/html:ro
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.staff.rule=Host(`${STAFF_HOST}`)"
  #     - "traefik.http.routers.staff.entrypoints=websecure"
  #     - "traefik.http.routers.staff.tls.certresolver=lets"
  #     - "traefik.http.services.staff.loadbalancer.server.port=80"

  # patient_frontend:
  #   image: nginx:1.27-alpine
  #   restart: unless-stopped
  #   networks: [proxy]
  #   volumes:
  #     - ./patient-frontend/dist:/usr/share/nginx/html:ro
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.patient.rule=Host(`${PATIENT_HOST}`)"
  #     - "traefik.http.routers.patient.entrypoints=websecure"
  #     - "traefik.http.routers.patient.tls.certresolver=lets"
  #     - "traefik.http.services.patient.loadbalancer.server.port=80"